name: Build
permissions:
  contents: write
  packages: write

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
    paths-ignore:
    - 'README.md'
    - 'Makefile'
    - 'config.json'
    - 'AGENTS.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
    - 'README.md'
    - 'Makefile'
    - 'config.json'
    - 'AGENTS.md'

jobs:
  build:
    # runs on multiple runners depending on matrix
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux-amd64
            runs_on: ubuntu-latest
            goos: linux
            goarch: amd64
            ext: ""
          - name: linux-arm64
            runs_on: ubuntu-latest
            goos: linux
            goarch: arm64
            ext: ""
          - name: darwin-amd64
            runs_on: macos-latest
            goos: darwin
            goarch: amd64
            ext: ""

    runs-on: ${{ matrix.runs_on }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get dependencies
        run: go mod download

      - name: Determine version
        id: vars
        uses: actions/github-script@v6
        with:
          script: |
            const ref = process.env.GITHUB_REF || '';
            let version;
            if (ref.startsWith('refs/tags/')) {
              version = ref.replace('refs/tags/', '');
            } else {
              version = `dev-${(process.env.GITHUB_SHA || '').slice(0,7)}`;
            }
            core.exportVariable('VERSION', version);
            core.exportVariable('COMMIT', process.env.GITHUB_SHA || '');
            core.exportVariable('BUILD_DATE', new Date().toISOString());
      - name: Build
        shell: bash
        env:
          VERSION: ${{ env.VERSION }}
          COMMIT: ${{ env.COMMIT }}
          BUILD_DATE: ${{ env.BUILD_DATE }}
        run: |
          mkdir -p release
          # produce binary named: ads1115-to-mqtt-<os>-<arch> (optional extension via matrix.ext)
          OUT=release/ads1115-to-mqtt-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}
          LDFLAGS="-s -w -X main.Version=${{ env.VERSION }} -X main.Commit=${{ env.COMMIT }} -X main.BuildDate=${{ env.BUILD_DATE }}"
          echo "Building $OUT"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -trimpath -ldflags "$LDFLAGS" -o "$OUT" .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # artifact directory/name used by download-artifact; use ads1115-to-mqtt-<os>-<arch>
          name: ads1115-to-mqtt-${{ matrix.goos }}-${{ matrix.goarch }}
          path: release/*

  publish:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify tag points to main
        id: verify
        run: |
          set -euo pipefail
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_SHA=$GITHUB_SHA"
          # ensure we have origin/main
          git fetch origin main
          if git merge-base --is-ancestor "$GITHUB_SHA" origin/main; then
            echo "on_main=true" >> "$GITHUB_OUTPUT"
            echo "Tag $GITHUB_REF ($GITHUB_SHA) is on origin/main"
          else
            echo "on_main=false" >> "$GITHUB_OUTPUT"
            echo "Tag $GITHUB_REF ($GITHUB_SHA) is NOT on origin/main; skipping release"
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        id: create_release
        if: steps.verify.outputs.on_main == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload assets to release
        if: steps.verify.outputs.on_main == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        run: |
          set -euo pipefail
          upload_url="${UPLOAD_URL%\{*}"
          echo "Upload URL: $upload_url"
          # find all files downloaded by actions/download-artifact and upload each
          find artifacts -type f -print0 | while IFS= read -r -d '' file; do
            name=$(basename "$file")
            echo "Uploading $name..."
            curl -sS -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" "$upload_url?name=$name"
          done
